\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename holos.info
@settitle HOLOS: Scientific Simulation and Engineering Framework
@c %**end of header

@copying
HOLOS: GNU Scientific Simulation and Engineering Framework

Copyright (C) 2025 4137314 (holos at mail.com)

This manual is part of HOLOS.

HOLOS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

HOLOS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with HOLOS.  If not, see https://www.gnu.org/licenses/.
@end copying

@titlepage
@title HOLOS: GNU Scientific Simulation and Engineering Framework
@subtitle User and Developer Manual
@author 4137314 (holos at mail.com)
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@chapter Introduction

HOLOS is a free, modular, and extensible GNU scientific software platform designed for advanced simulation, physical modeling, and engineering design. Its architecture enables researchers, engineers, and educators to build, analyze, and share complex scientific models with ease.

Key features of HOLOS include:
@itemize @bullet
@item A comprehensive set of libraries for classical and modern physics, engineering, and computational science.
@item Peer-to-peer (P2P) collaboration and distributed computing using GNUnet.
@item Built-in support for artificial intelligence models and scientific machine learning.
@item A command-line interface (CLI) for running simulations, managing models, and automating workflows.
@item Strict adherence to GNU coding standards and free software principles.
@end itemize

HOLOS is written in C for performance and portability, and is intended to foster open, collaborative scientific research and reproducibility.

@menu
* Overview::
* Installation::
* Usage::
* Modules::
* Development::
* License::
@end menu

@node Overview
@chapter Overview

HOLOS provides a unified environment for scientific computing across a broad spectrum of domains:

@itemize @bullet
@item @b{Physics:} Libraries for classical mechanics, quantum mechanics, relativity, thermodynamics, solid-state physics, nuclear physics, astrophysics, electromagnetism, and more.
@item @b{Engineering:} Tools for modeling, simulation, and analysis in various engineering fields.
@item @b{Artificial Intelligence:} Neural network models (MLP, CNN, RNN, GAN, Transformer) for scientific and engineering applications.
@item @b{Peer-to-Peer Collaboration:} Distributed data sharing and computation using GNUnet, enabling collaborative research and open science.
@item @b{Extensibility:} Modular design allows users to add new models, algorithms, and interfaces easily.
@end itemize

The platform is organized into modular libraries and command-line tools, making it suitable for both standalone use and integration into larger workflows. HOLOS aims to bridge the gap between traditional scientific computing and modern collaborative, AI-driven research.

@node Installation
@chapter Installation
To install HOLOS, use the standard GNU procedure:
@example
$ ./configure
$ make
$ make check   # optional: run tests
$ make install
@end example

Dependencies include the GNU Scientific Library (GSL), GNUnet (optional for P2P), and standard C libraries. See the README for details.

@node Usage
@chapter Usage
After installation, you can use the main CLI tool:
@example
$ holos
@end example

You can also link against the HOLOS libraries in your own C programs. Include the relevant headers from @file{include/}.

@node Modules
@chapter Modules

HOLOS is organized into the following main modules:

@menu
* Physics::
* AI::
* P2P::
* CLI::
@end menu

@node Physics

@section Physics
The Physics module is divided into several submodules, each targeting a specific domain of physical science. Each submodule provides specialized headers and functions for simulation and modeling.

@menu
* Classical Mechanics::
* Analytical Mechanics::
* Continuum Mechanics::
* Quantum Mechanics::
* Relativistic Mechanics::
* Astrophysics::
* Electromagnetism::
* Fields::
* Nuclear Physics::
* Solid State Physics::
* Thermodynamics::
@end menu

@node Classical Mechanics
@subsection Classical Mechanics
@file{include/core/phys/mech/classical/}

Provides functions and data structures for Newtonian mechanics, including:
@itemize @bullet
@item @file{dynamics.h} -- Equations of motion, force analysis
@item @file{fluids.h} -- Fluid statics and dynamics
@item @file{kinematics.h} -- Kinematic equations and motion analysis
@item @file{oscillations.h} -- Harmonic and damped oscillators
@item @file{statics.h} -- Static equilibrium and structures
@end itemize

@node Analytical Mechanics
@subsection Analytical Mechanics
@file{include/core/phys/mech/analytical/}

Focuses on Lagrangian and Hamiltonian formulations:
@itemize @bullet
@item @file{lagrange.h} -- Lagrangian mechanics
@item @file{hamilton.h} -- Hamiltonian mechanics
@end itemize

@node Continuum Mechanics
@subsection Continuum Mechanics
@file{include/core/phys/mech/continuum/}

Models continuous media:
@itemize @bullet
@item @file{elasticity.h} -- Elasticity and deformation
@item @file{fluid_dynamics.h} -- Advanced fluid dynamics
@end itemize

@node Quantum Mechanics
@subsection Quantum Mechanics
@file{include/core/phys/mech/quantum/}

Quantum systems and wave mechanics:
@itemize @bullet
@item @file{particle_in_box.h} -- Particle in a box
@item @file{quantum_harmonic_oscillator.h} -- Quantum oscillators
@item @file{schrodinger.h} -- Schr√∂dinger equation
@end itemize

@node Relativistic Mechanics
@subsection Relativistic Mechanics
@file{include/core/phys/mech/relativistic/}

Special and general relativity:
@itemize @bullet
@item @file{relativistic_mech.h} -- Relativistic dynamics
@end itemize

@node Astrophysics
@subsection Astrophysics
@file{include/core/phys/astro/}

Celestial and orbital mechanics:
@itemize @bullet
@item @file{celestial_mechanics.h} -- Celestial mechanics
@item @file{orbital_dynamics.h} -- Orbital dynamics
@end itemize

@node Electromagnetism
@subsection Electromagnetism
@file{include/core/phys/em/}

Electromagnetic theory and applications:
@itemize @bullet
@item @file{lorentz_forces.h} -- Lorentz force calculations
@item @file{maxwell.c} -- Maxwell's equations
@item @file{wave_equations.c} -- Electromagnetic waves
@end itemize

@node Fields
@subsection Fields
@file{include/core/phys/fields/}

Field theory and quantum field theory:
@itemize @bullet
@item @file{qft.h} -- Quantum field theory basics
@end itemize

@node Nuclear Physics
@subsection Nuclear Physics
@file{include/core/phys/nuclear/}

Nuclear structure and reactions:
@itemize @bullet
@item @file{fission_fusion.h} -- Fission and fusion processes
@item @file{nuclear_decay.h} -- Radioactive decay
@item @file{nuclear_forces.h} -- Nuclear forces
@end itemize

@node Solid State Physics
@subsection Solid State Physics
@file{include/core/phys/ss/}

Crystalline and condensed matter physics:
@itemize @bullet
@item @file{band_structure.h} -- Band structure
@item @file{crystal_lattice.h} -- Crystal lattices
@item @file{phonons.h} -- Phonons and lattice vibrations
@end itemize

@node Thermodynamics
@subsection Thermodynamics
@file{include/core/phys/thermo/}

Thermodynamic systems and heat transfer:
@itemize @bullet
@item @file{entropy.h} -- Entropy and statistical mechanics
@item @file{heat_transfer.h} -- Heat transfer
@item @file{thermodynamics.h} -- Thermodynamic laws and cycles
@end itemize

Each submodule header provides data structures and function prototypes for its domain. See the @file{include/core/phys/} directory for details and example usage.

@node AI
@section AI
The AI module implements neural network models for scientific and engineering applications. Available models:

@itemize @bullet
@item @b{Multilayer Perceptron (MLP):} @file{include/core/ai/mlp.h}
@item @b{Convolutional Neural Network (CNN):} @file{include/core/ai/cnn.h}
@item @b{Recurrent Neural Network (RNN):} @file{include/core/ai/rnn.h}
@item @b{Generative Adversarial Network (GAN):} @file{include/core/ai/gan.h}
@item @b{Transformer:} @file{include/core/ai/transformer.h}
@end itemize

Each header defines the data structures and function signatures for its model. Example usage:

@example
#include <core/ai/mlp.h>
// ... use MLP functions ...
@end example

@node P2P
@section P2P
The P2P module enables peer-to-peer scientific collaboration using GNUnet. It provides distributed data sharing and computation features for collaborative research.

@itemize @bullet
@item @b{Headers:} @file{include/core/p2p/p2p.h}
@item @b{Source:} @file{src/p2p/p2p.c}
@end itemize

GNUnet is optional but recommended for distributed workflows. See the README for setup instructions.

@node CLI
@section CLI
The CLI module provides a command-line interface for running simulations, managing models, and accessing HOLOS features.

@itemize @bullet
@item @b{Header:} @file{include/cli/cli.h}
@item @b{Source:} @file{src/cli/cli.c}
@end itemize

Example usage:

@example
$ holos --help
@end example

Each module is documented in its own header and source files. See the @file{include/} and @file{src/} directories for details.

@node Development
@chapter Development
HOLOS follows the GNU coding standards. The build system uses GNU Autotools (@file{configure.ac}, @file{Makefile.am}).

@itemize @bullet
@item Source code: @file{src/}
@item Headers: @file{include/}
@item Documentation: @file{doc/}
@item Tests: @file{tests/}
@end itemize

Contributions are welcome. Please submit patches or pull requests via the project repository.

@node License
@chapter License
HOLOS is licensed under the GNU General Public License (GPL) version 3 or later. See the file @file{LICENSE} for details.

@bye